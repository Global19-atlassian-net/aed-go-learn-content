### YamlMime:ModuleUnit
uid: learn.language.
metadata:
  title: Knowledge check
  description: Knowledge check
  ms.date: 
  author: meaghanlewis
  ms.author: shanama
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
title: Knowledge check
durationInMinutes: 2
content: |
  Answer these questions to demonstrate what you've learned:
quiz:
  title: Check your knowledge
  questions:
  - content: "Can you use variables declared within an `if` statement outside of the `if` statement?"
    choices:
    - content: "Yes, because variables are global."
      isCorrect: false
      explanation: "No, these variables' scope are only available within an `if` block."
    - content: "No, the variable scope works only within the `if` block or nested `if` statements."
      isCorrect: true
      explanation: "Correct, you can't use those variables outside of the `if` block."
    - content: "Yes, as long as you use it within the function."
      isCorrect: false
      explanation: "No, you can only use those variables within the `if` block."
    - content: "No, you have to declare a variable outside of an `if` statement."
      isCorrect: false
      explanation: "Not necessarily. In Go you don't have to declare a variable before you can use it in an `if` block."
  - content: "Do you need to include a `break` keyword at the end of every `case` statement in a `switch` block?"
    choices:
    - content: "No, Go doesn't require you to include the `break` keyword."
      isCorrect: true
      explanation: "Correct. By default, Go will stop the `switch` statement when finishing a `case` block."
    - content: "Yes, otherwise the following `case` statements will be evaluated."
      isCorrect: false
      explanation: "No. By default, Go will stop the `switch` statement when finishing a `case` block."
    - content: "No, doesn't have support for the `break` keyword."
      isCorrect: false
      explanation: "Go does have support for the `break` statement, but by default, Go will stop the `switch` statement when finishing a `case` block.."
  - content: "What does the `panic()` function do in Go?"
    choices:
    - content: "Throws an error that you need to catch; otherwise, the program crashes without any error."
      isCorrect: false
      explanation: "No, the `panic` function makes the program to crash and prints out the error and its details, you don't necessarily have to `catch` the error to see it."
    - content: "Prints out a panic message to the console."
      isCorrect: false
      explanation: "It prints out a panic message and also makes the program crash."
    - content: "Crashes a program and prints out the error message and its stack trace."
      isCorrect: true
      explanation: "Correct, you can use this function when you explicitly want to make the program stop running and print out the error and its details."
